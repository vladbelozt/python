#задание 1
import os 
import subprocess

class GemeLauncher:
    def __init__(self, name, patch):
        self.name = name
        self.patch = patch
        
    def run(self):
        if  oc.pach.exists(self.patch):
                try:
                    
                    subprocess.Popen(self.patch)
                    print(f"игра{self.name} успешно запущена с пути: {self.patch}")
                except Exception as e:
                    print(f"ошибка при запуске игры {self.name}: {e}")
                else:
                    print(f"ошибка: игра {self.name} не запущенаю путь {self.patch} не найден.")
#задание 2
class File:
    def __init__(self, filename, size):
        self.filename = filename
        self.size = size 
    def open(self):
        print(f"Открытие файла {self.filename}")

    def info(self):
        return f"Имя: {self.filename}, размер: {self.size} кб"


class TextFile(File):
    def __init__(self, filename, size, encoding):
        super().__init__(filename, size)
        self.encoding = encoding 

    def open(self):
        print(f"Открытие текстового файла {self.filename} с кодировкой {self.encoding}")


class ImageFile(File):
    def __init__(self, filename, size, resolution):
        super().__init__(filename, size)
        self.resolution = resolution 

    def open(self):
        print(f"Открытие изображения {self.filename} с разрешением {self.resolution}")


text_file = TextFile("doc.txt", 177, "utf-8")
image_file = ImageFile("photo.jpg", 2500, "1200x1900")

text_file.open()
image_file.open()

print(text_file.info())
print(image_file.info())
#задание 3
class RacingCar:
    def __init__(self, brand, model, color, number):
        self.brand = brand
        self.model = model
        self.color = color
        self.number = number

    def info_car(self):
        print(f"Участник №{self.number}\n"
              f"Автомобиль: {self.color} {self.brand} {self.model}")


class Race:
    def __init__(self, name_race):
        self.name_race = name_race
        self.race_participants = []

    def append_participants(self, *participants):
        self.race_participants.extend(participants)

    def __print_participants(self):
        print("Участники гонки:")
        for car in self.race_participants:
            print(f"№{car.number} {car.brand} {car.model}")

    def start_race(self):
        print(f"{self.name_race} скоро старт!")
        self.__print_participants()
        print("Гонка началась.")


car_1 = RacingCar("Mitsubishi", "Lancer Evolution IX", "жёлтый", 28)
car_1.info_car()

car_2 = RacingCar("Porsche", "911", "чёрный", 14)
car_2.info_car()

race_1 = Race("Кольцевые автогонки")
race_1.append_participants(car_1, car_2)
race_1.start_race()
#задание 4
class MusicFile:
    def play(self):
        print("Воспроизведение аудио файла...")

class MP3File(MusicFile):
    def play(self):
        print("Воспроизведение MP3 файла")

class WAVFile(MusicFile):
    def play(self):
        print("Воспроизведение WAV файла")

class FLACFile(MusicFile):
    def play(self):
        print("Воспроизведение FLAC файла")

def play_music(files: list):
    for file in files:
        file.play()

music_files = [MP3File(), WAVFile(), FLACFile()]

play_music(music_files)
        
                
         
        
       
